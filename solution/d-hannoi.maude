--- Hanoi Towers
--- Adapted from 
--- Francisco Durán, Steven Eker, Santiago Escobar, Narciso Martí-Oliet, José Meseguer, Rubén Rubio, Carolyn L. Talcott:
--- Programming and symbolic computation in Maude. J. Log. Algebraic Methods Program. 110 (2020)


fmod HANOI-STATE is
    pr NAT-LIST . --- Maude's list of natural numbers

    sort Tower .
    --- The fist argument is the ID of the tower
    --- The second is the list of disks in the tower
    op (_)[_] : Nat NatList -> Tower [ctor] .

    --- Defining a multiset of towers
    sort Hanoi .
    subsort Tower < Hanoi .
    op empty : -> Hanoi [ctor] .
    op __ : Hanoi Hanoi -> Hanoi [ctor assoc comm id: empty] . 

    --- Initial state
    op init : -> Hanoi .
    eq init = (1)[3 2 1] (2)[nil] (3)[nil] .
endfm

mod HANOI is
    pr HANOI-STATE .
    vars T1 T2 Nat . --- IDs of towers
    vars D1 D2 : Nat . --- Size of disks
    vars L1 L2 : NatList .
    var H : Hanoi . 

    --- Dynamic behavior
    rl [move] : (T1) [L1 D1] (T2) [nil] => 
                (T1) [L1]    (T2) [D1] .

    crl [move] : (T1) [L1 D1] (T2) [L2 D2] => 
                 (T1) [L1]    (T2) [L2 D2 D1] 
    if D2 > D1 .
endm

eof

--- Can we place all the disk in (3)?
search [1] init =>* (1)[nil] (2)[nil] (3)[3 2 1] .

--- Safety property: In each tower, if we have two disks D1 D2,
--- it must be the case that D1 > D2 (e.g., [ 3 2 1 ] is fine
--- but [1 2 3] is not)
--- We will look for states that violates that condition. 
--- Note that there is no reachable state satisfying the negation
--- of the property. Then, our system is "safe" (w.r.t. that specification). 

search [1] init =>* (T1)[L1 D1 D2 L2] H such that D1 < D2 .

